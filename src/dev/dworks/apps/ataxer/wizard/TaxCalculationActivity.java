package dev.dworks.apps.ataxer.wizard;import java.util.Calendar;import android.annotation.SuppressLint;import android.content.AsyncQueryHandler;import android.content.ContentResolver;import android.content.ContentValues;import android.database.Cursor;import android.net.Uri;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import dev.dworks.apps.ataxer.R;import dev.dworks.apps.ataxer.entity.TaxCalculation;import dev.dworks.apps.ataxer.wizard.pages.DeductionFourPage;import dev.dworks.apps.ataxer.wizard.pages.DeductionOnePage;import dev.dworks.apps.ataxer.wizard.pages.DeductionThreePage;import dev.dworks.apps.ataxer.wizard.pages.DeductionTwoPage;import dev.dworks.apps.ataxer.wizard.pages.DetailsPage;import dev.dworks.apps.ataxer.wizard.pages.ExemptionPage;import dev.dworks.apps.ataxer.wizard.pages.IncomePage;import dev.dworks.libs.actionbarplus.dialog.BaseDialogFragment.SimpleDialogListener;import dev.dworks.libs.actionbarplus.dialog.SimpleDialogFragment;import dev.dworks.libs.awizard.WizardActivity;public class TaxCalculationActivity extends WizardActivity implements SimpleDialogListener{	private static final int TAX_10_SENIOR_SLAB = 250000;	private static final int TAX_10_SLAB = 200000;	private static final int TAX_20_SLAB = 500000;	private static final int TAX_30_SLAB = 1000000;	private static final int TAX_SURCHARGE_SLAB = 10000000;	private Bundle bundle;	private Uri uri = null;	@Override	public void onCreate(Bundle savedInstanceState) {		mWizardModel = new TaxWizardModel(this);		super.onCreate(savedInstanceState);		setReviewText("Calculate Tax");		uri = getIntent().getData();		getSupportActionBar().setDisplayHomeAsUpEnabled(true);		if(null == savedInstanceState){			if (uri != null) {				new TaxCalculationQuery(getContentResolver()).startQuery(0, null, uri, null, null, null, null);			} else {				setWizardModel(mWizardModel);			}			}		else{			setWizardModel(mWizardModel);		}	}	@Override	public void onConfirmClick() {	}	@Override	public boolean onCreateOptionsMenu(Menu menu) {		getMenuInflater().inflate(R.menu.tax_calculation, menu);		return true;	}	@Override	public boolean onOptionsItemSelected(MenuItem item) {		switch (item.getItemId()) {		case android.R.id.home:		case R.id.action_cancel:			finishOrSave();			break;		}		return super.onOptionsItemSelected(item);	}	@Override	public void onDoneClick() {		ContentValues contentValues = getContentValues();		if (uri == null) {			contentValues.put("created_at", Calendar.getInstance().getTimeInMillis());			getContentResolver().insert(TaxCalculation.CONTENT_URI, contentValues);		} else {			contentValues.put("modified_at", Calendar.getInstance().getTimeInMillis());			getContentResolver().update(uri, contentValues, null, null);		}		finish();	}	@SuppressLint({ "HandlerLeak" })	private class TaxCalculationQuery extends AsyncQueryHandler {		public TaxCalculationQuery(ContentResolver contentResolver) {			super(contentResolver);		}		protected void onQueryComplete(int token, Object object, Cursor cursor) {			if (cursor != null) {				if (cursor.moveToFirst()) {					Bundle DetailsBundle = new Bundle();					DetailsBundle.putString("name", cursor.getString(cursor.getColumnIndex("name")));					DetailsBundle.putInt("category", cursor.getInt(cursor.getColumnIndex("category")));					DetailsBundle.putInt("age", cursor.getInt(cursor.getColumnIndex("age")));					DetailsBundle.putInt("sex", cursor.getInt(cursor.getColumnIndex("sex")));					DetailsBundle.putInt("metro", cursor.getInt(cursor.getColumnIndex("metro")));					DetailsBundle.putInt("financial_yr", cursor.getInt(cursor.getColumnIndex("financial_yr")));										Bundle IncomeBundle = new Bundle();					long l1 = cursor.getInt(cursor.getColumnIndex("income_salary"));					long l2 = cursor.getInt(cursor.getColumnIndex("income_salary_basic"));					cursor.getInt(cursor.getColumnIndex("total_income"));					IncomeBundle.putLong("income_salary", l1);					IncomeBundle.putLong("income_salary_basic", l2);					IncomeBundle.putLong("income_salary_hra", cursor.getLong(cursor.getColumnIndex("income_salary_hra")));					IncomeBundle.putLong("income_salary_conveyance",cursor.getLong(cursor.getColumnIndex("income_salary_conveyance")));					IncomeBundle.putLong("income_salary_lta", cursor.getLong(cursor.getColumnIndex("income_salary_lta")));					IncomeBundle.putLong("income_salary_medical", cursor.getLong(cursor.getColumnIndex("income_salary_medical")));					IncomeBundle.putLong("income_salary_pf", cursor.getLong(cursor.getColumnIndex("income_salary_pf")));					IncomeBundle.putLong("income_other",cursor.getLong(cursor.getColumnIndex("income_other")));										Bundle ExemptionBundle = new Bundle();					ExemptionBundle.putLong("allowance_rent_paid", cursor.getLong(cursor.getColumnIndex("allowance_rent_paid")));					ExemptionBundle.putLong("allowance_hra", cursor.getLong(cursor.getColumnIndex("allowance_hra")));					ExemptionBundle.putLong("allowance_transport", cursor.getLong(cursor.getColumnIndex("allowance_transport")));					ExemptionBundle.putLong("allowance_gratuity", cursor.getLong(cursor.getColumnIndex("allowance_gratuity")));					ExemptionBundle.putLong("allowance_child_education",cursor.getLong(cursor.getColumnIndex("allowance_child_education")));					ExemptionBundle.putLong("allowance_leave_encashment",cursor.getLong(cursor.getColumnIndex("allowance_leave_encashment")));					ExemptionBundle.putLong("allowance_lta", cursor.getLong(cursor.getColumnIndex("allowance_lta")));					ExemptionBundle.putLong("allowance_food_coupon", cursor.getLong(cursor.getColumnIndex("allowance_food_coupon")));					ExemptionBundle.putLong("allowance_total", cursor.getLong(cursor.getColumnIndex("total_allowance")));										Bundle DeductionOneBundle = new Bundle();					DeductionOneBundle.putLong("deduction_entertainment_allowance",cursor.getLong(cursor.getColumnIndex("deduction_entertainment")));					DeductionOneBundle.putLong("deduction_tax_on_employment", cursor.getLong(cursor.getColumnIndex("deduction_tax_on_employment")));					DeductionOneBundle.putLong("deduction_one_total", cursor.getLong(cursor.getColumnIndex("total_deducation_one")));										Bundle DeductionTwoBundle = new Bundle();					DeductionTwoBundle.putLong("deduction_lic", cursor.getLong(cursor.getColumnIndex("deduction_80c_lic")));					DeductionTwoBundle.putLong("deduction_ulip", cursor.getLong(cursor.getColumnIndex("deduction_80c_ulip")));					DeductionTwoBundle.putLong("deduction_ppf", cursor.getLong(cursor.getColumnIndex("deduction_80c_public_provident_fund")));					DeductionTwoBundle.putLong("deduction_vpf", cursor.getLong(cursor.getColumnIndex("deduction_80c_voluntary_provident_fund")));					DeductionTwoBundle.putLong("deduction_epf", cursor.getLong(cursor.getColumnIndex("deduction_80c_employee_provident_fund")));					DeductionTwoBundle.putLong("deduction_mutual_funds", cursor.getLong(cursor.getColumnIndex("deduction_80c_mutual_fund")));					DeductionTwoBundle.putLong("deduction_infrastructure_bonds", cursor.getLong(cursor.getColumnIndex("deduction_80c_infrastructure_bonds")));					DeductionTwoBundle.putLong("deduction_fixed_deposit", cursor.getLong(cursor.getColumnIndex("deduction_80c_fixed_deposit")));					DeductionTwoBundle.putLong("deduction_nsc", cursor.getLong(cursor.getColumnIndex("deduction_80c_national_saving_certificate")));					DeductionTwoBundle.putLong("deduction_child_tution_fee", cursor.getLong(cursor.getColumnIndex("deduction_80c_child_tution_fees")));					DeductionTwoBundle.putLong("deduction_hlpr", cursor.getLong(cursor.getColumnIndex("deduction_80c_house_load_principal_repayment")));					DeductionTwoBundle.putLong("deduction_nsc_interest", cursor.getLong(cursor.getColumnIndex("deduction_80c_nsc_interest")));					DeductionTwoBundle.putLong("deduction_two_total", cursor.getLong(cursor.getColumnIndex("total_deducation_two")));					DeductionTwoBundle.putLong("deduction_80ccc", cursor.getLong(cursor.getColumnIndex("deduction_80ccc")));					DeductionTwoBundle.putLong("deduction_80ccd", cursor.getLong(cursor.getColumnIndex("deduction_80ccd")));					Bundle DeductionThreeBundle = new Bundle();					DeductionThreeBundle.putLong("deduction_80ccg", cursor.getLong(cursor.getColumnIndex("deduction_80ccg")));					DeductionThreeBundle.putLong("deduction_80d", cursor.getLong(cursor.getColumnIndex("deduction_80d")));					DeductionThreeBundle.putLong("deduction_80dd", cursor.getLong(cursor.getColumnIndex("deduction_80dd")));					DeductionThreeBundle.putLong("deduction_80ddb", cursor.getLong(cursor.getColumnIndex("deduction_80ddb")));					DeductionThreeBundle.putLong("deduction_three_total", cursor.getLong(cursor.getColumnIndex("total_deducation_three")));										Bundle DeductionFourBundle = new Bundle();					DeductionFourBundle.putLong("deduction_80e", cursor.getLong(cursor.getColumnIndex("deduction_80e")));					DeductionFourBundle.putLong("deduction_80ee", cursor.getLong(cursor.getColumnIndex("deduction_80ee")));					DeductionFourBundle.putLong("deduction_80u", cursor.getLong(cursor.getColumnIndex("deduction_80u")));					DeductionFourBundle.putLong("deduction_80g", cursor.getLong(cursor.getColumnIndex("deduction_80g")));					DeductionFourBundle.putLong("deduction_80gg", cursor.getLong(cursor.getColumnIndex("deduction_80gg")));					DeductionFourBundle.putLong("deduction_8tta", cursor.getLong(cursor.getColumnIndex("deduction_80tta")));					DeductionFourBundle.putLong("deduction_four_total", cursor.getLong(cursor.getColumnIndex("total_deducation_four")));										Bundle loadBundle = new Bundle();					loadBundle.putBundle(DetailsPage.TITLE, DetailsBundle);					loadBundle.putBundle(IncomePage.TITLE, IncomeBundle);					loadBundle.putBundle(ExemptionPage.TITLE, ExemptionBundle);					loadBundle.putBundle(DeductionOnePage.TITLE, DeductionOneBundle);					loadBundle.putBundle(DeductionTwoPage.TITLE, DeductionTwoBundle);					loadBundle.putBundle(DeductionThreePage.TITLE, DeductionThreeBundle);					loadBundle.putBundle(DeductionFourPage.TITLE, DeductionFourBundle);										mWizardModel.load(loadBundle);					setWizardModel(mWizardModel);				}				cursor.close();			}			super.onQueryComplete(token, object, cursor);		}	}		private long calculateTax(long income_salary, long income_other,			long allowance_total, long deduction_one_total, long deduction_two_total, long deduction_three_total,			long deduction_four_total) {		if(income_salary <= TAX_10_SLAB){			return 0;		}		return income_other + (income_salary - (allowance_total + deduction_one_total))				- ( deduction_two_total + deduction_three_total + deduction_four_total);	}	private long saveIntoContents(String value) {		long longValue = 0;		if (bundle.containsKey(value))			longValue = bundle.getLong(value, longValue);		return longValue;	}	public ContentValues getContentValues() {		bundle = mWizardModel.saveIntoSingle();		ContentValues contentValues = new ContentValues();		contentValues.put("name", bundle.getString("name"));		contentValues.put("category", Integer.valueOf(bundle.getInt("category", 0)));		contentValues.put("age", Integer.valueOf(bundle.getInt("age", 0)));		contentValues.put("sex", Integer.valueOf(bundle.getInt("sex", 0)));		contentValues.put("metro", Integer.valueOf(bundle.getInt("metro", 0)));		contentValues.put("financial_yr", Integer.valueOf(bundle.getInt("financial_yr", 0)));		contentValues.put("income_salary", Long.valueOf(saveIntoContents("income_salary")));		contentValues.put("income_salary_basic", Long.valueOf(saveIntoContents("income_salary_basic")));		contentValues.put("income_salary_hra", Long.valueOf(saveIntoContents("income_salary_hra")));		contentValues.put("income_salary_conveyance", Long.valueOf(saveIntoContents("income_salary_conveyance")));		contentValues.put("income_salary_lta", Long.valueOf(saveIntoContents("income_salary_lta")));		contentValues.put("income_salary_medical", Long.valueOf(saveIntoContents("income_salary_medical")));		contentValues.put("income_salary_pf", Long.valueOf(saveIntoContents("income_salary_pf")));		contentValues.put("income_other", Long.valueOf(saveIntoContents("income_other")));				long income = saveIntoContents("income_salary") + saveIntoContents("income_other");		contentValues.put("total_income", Long.valueOf(income));		contentValues.put("allowance_rent_paid", Long.valueOf(saveIntoContents("allowance_rent_paid")));		contentValues.put("allowance_hra", Long.valueOf(saveIntoContents("allowance_hra")));		contentValues.put("allowance_transport", Long.valueOf(saveIntoContents("allowance_transport")));		contentValues.put("allowance_gratuity", Long.valueOf(saveIntoContents("allowance_gratuity")));		contentValues.put("allowance_child_education", Long.valueOf(saveIntoContents("allowance_child_education")));		contentValues.put("allowance_leave_encashment",Long.valueOf(saveIntoContents("allowance_leave_encashment")));		contentValues.put("allowance_lta", Long.valueOf(saveIntoContents("allowance_lta")));		contentValues.put("allowance_food_coupon", Long.valueOf(saveIntoContents("allowance_food_coupon")));		contentValues.put("total_allowance", Long.valueOf(saveIntoContents("allowance_total")));				contentValues.put("deduction_entertainment",Long.valueOf(saveIntoContents("deduction_entertainment_allowance")));		contentValues.put("deduction_tax_on_employment", Long.valueOf(saveIntoContents("deduction_tax_on_employment")));		contentValues.put("total_deducation_one", Long.valueOf(saveIntoContents("deduction_one_total")));				contentValues.put("deduction_80c_lic", Long.valueOf(saveIntoContents("deduction_lic")));		contentValues.put("deduction_80c_ulip", Long.valueOf(saveIntoContents("deduction_ulip")));		contentValues.put("deduction_80c_public_provident_fund", Long.valueOf(saveIntoContents("deduction_ppf")));		contentValues.put("deduction_80c_voluntary_provident_fund", Long.valueOf(saveIntoContents("deduction_vpf")));		contentValues.put("deduction_80c_employee_provident_fund", Long.valueOf(saveIntoContents("deduction_epf")));		contentValues.put("deduction_80c_mutual_fund", Long.valueOf(saveIntoContents("deduction_mutual_funds")));		contentValues.put("deduction_80c_infrastructure_bonds", Long.valueOf(saveIntoContents("deduction_infrastructure_bonds")));		contentValues.put("deduction_80c_fixed_deposit", Long.valueOf(saveIntoContents("deduction_fixed_deposit")));		contentValues.put("deduction_80c_national_saving_certificate", Long.valueOf(saveIntoContents("deduction_nsc")));		contentValues.put("deduction_80c_child_tution_fees", Long.valueOf(saveIntoContents("deduction_child_tution_fee")));		contentValues.put("deduction_80c_house_load_principal_repayment", Long.valueOf(saveIntoContents("deduction_hlpr")));		contentValues.put("deduction_80c_nsc_interest", Long.valueOf(saveIntoContents("deduction_nsc_interest")));		contentValues.put("deduction_80ccc", Long.valueOf(saveIntoContents("deduction_80ccc")));		contentValues.put("deduction_80ccd", Long.valueOf(saveIntoContents("deduction_80ccd")));		contentValues.put("total_deducation_two", Long.valueOf(saveIntoContents("deduction_two_total")));				contentValues.put("deduction_80ccg", Long.valueOf(saveIntoContents("deduction_80ccg")));		contentValues.put("deduction_80d", Long.valueOf(saveIntoContents("deduction_80d")));		contentValues.put("deduction_80dd", Long.valueOf(saveIntoContents("deduction_80dd")));		contentValues.put("deduction_80ddb", Long.valueOf(saveIntoContents("deduction_80ddb")));		contentValues.put("total_deducation_three", Long.valueOf(saveIntoContents("deduction_three_total")));				contentValues.put("deduction_80ee", Long.valueOf(saveIntoContents("deduction_80ee")));		contentValues.put("deduction_80e", Long.valueOf(saveIntoContents("deduction_80e")));		contentValues.put("deduction_80u", Long.valueOf(saveIntoContents("deduction_80u")));		contentValues.put("deduction_80g", Long.valueOf(saveIntoContents("deduction_80g")));		contentValues.put("deduction_80gg", Long.valueOf(saveIntoContents("deduction_80gg")));		contentValues.put("deduction_80tta", Long.valueOf(saveIntoContents("deduction_8tta")));		contentValues.put("total_deducation_four", Long.valueOf(saveIntoContents("deduction_four_total")));		contentValues.put("total_deducation", Long.valueOf(saveIntoContents("deduction_one_total")						+ saveIntoContents("deduction_two_total")						+ saveIntoContents("deduction_three_total")						+ saveIntoContents("deduction_four_total")));				long total_taxable_income = calculateTax(saveIntoContents("income_salary"),				saveIntoContents("income_other"),				saveIntoContents("allowance_total"),				saveIntoContents("deduction_one_total"),				saveIntoContents("deduction_two_total"),				saveIntoContents("deduction_three_total"),				saveIntoContents("deduction_four_total"));		int category = Integer.valueOf(bundle.getInt("category", 0));		long tax_payable = 0;		float rebate = 0;		float surcharge = 0;				switch (category) {		default:			if ((total_taxable_income > TAX_10_SLAB) && (total_taxable_income <= TAX_20_SLAB)){				tax_payable = 10 * (total_taxable_income - TAX_10_SLAB) / 100;			}			else if ((total_taxable_income > TAX_20_SLAB) && (total_taxable_income <= TAX_30_SLAB)){				tax_payable = 30000 + 20 * (total_taxable_income - TAX_20_SLAB) / 100;			}			else if (total_taxable_income > TAX_30_SLAB){				tax_payable = 130000 + 30 * (total_taxable_income - TAX_30_SLAB) / 100;			}			break;		case 3:			if ((total_taxable_income > TAX_10_SENIOR_SLAB) && (total_taxable_income <= TAX_20_SLAB)) {				tax_payable = 10 * (total_taxable_income - TAX_10_SENIOR_SLAB) / 100;			} else if ((total_taxable_income > TAX_20_SLAB) && (total_taxable_income <= TAX_30_SLAB)) {				tax_payable = 30000 + 20 * (total_taxable_income - TAX_20_SLAB) / 100;			} else if (total_taxable_income > TAX_30_SLAB) {				tax_payable = 130000 + 30 * (total_taxable_income - TAX_30_SLAB) / 100;			}		case 4:			if ((total_taxable_income > TAX_20_SLAB) && (total_taxable_income <= TAX_30_SLAB)) {				tax_payable = 30000 + 20 * (total_taxable_income - TAX_20_SLAB) / 100;			} else if (total_taxable_income > TAX_30_SLAB) {				tax_payable = 130000 + 30 * (total_taxable_income - TAX_30_SLAB) / 100;			}			break;		}				//surcharge		if (income > TAX_SURCHARGE_SLAB) {			surcharge = (float) (10 * tax_payable / 100);			tax_payable += surcharge;		}				//educational cess		float educational_cess = (float) (3 * tax_payable / 100);				//rebate		float total_tax_payable = tax_payable + educational_cess;		if (income > TAX_10_SLAB && income <= TAX_20_SLAB) {			rebate = 2000;			total_tax_payable -= rebate;		}		contentValues.put("total_taxable_income", Long.valueOf(total_taxable_income));		contentValues.put("tax_payable", Long.valueOf(tax_payable));		contentValues.put("educational_cess", Long.valueOf((int) educational_cess));		contentValues.put("rebate", Long.valueOf((int) rebate));		contentValues.put("surcharge", Long.valueOf((int) surcharge));		contentValues.put("total_tax_payable", Long.valueOf((int) total_tax_payable));		return contentValues;	}		@Override	public void onBackPressed() {		finishOrSave();	}		private void finishOrSave() {		if(null != mWizardModel 				&& mWizardModel.getCurrentPageSequence().get(0).isCompleted()				&& getDataChanged()){			((SimpleDialogFragment.SimpleDialogBuilder) SimpleDialogFragment.createBuilder(this, getSupportFragmentManager())					.setMessage("Save Uncalculated Tax?")					.setPositiveButtonText("Save")					.setNegativeButtonText("No")					.setRequestCode(99)).show();			}		else{			finish();		}	}	@Override	public void onPositiveButtonClicked(int requestCode) {		onDoneClick();	}	@Override	public void onNegativeButtonClicked(int requestCode) {		finish();	}}