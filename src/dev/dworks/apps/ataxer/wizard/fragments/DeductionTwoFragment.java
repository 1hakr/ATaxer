package dev.dworks.apps.ataxer.wizard.fragments;import static dev.dworks.apps.ataxer.misc.Utils.getFormattedString;import android.app.Activity;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.TextView;import dev.dworks.apps.ataxer.R;import dev.dworks.apps.ataxer.misc.Utils;import dev.dworks.apps.ataxer.ui.TextCurrency;import dev.dworks.apps.ataxer.wizard.TaxCalculationActivity;import dev.dworks.apps.ataxer.wizard.pages.DeductionTwoPage;import dev.dworks.betterpickers.numberpicker.NumberPickerBuilder;import dev.dworks.betterpickers.numberpicker.NumberPickerDialogFragment.NumberPickerDialogHandler;import dev.dworks.libs.awizard.model.PageFragmentCallbacks;public class DeductionTwoFragment extends Fragment implements NumberPickerDialogHandler, OnClickListener {	private static final String ARG_KEY = "key";	private TextCurrency deduction_80ccc;	private TextCurrency deduction_80ccd;	private TextCurrency deduction_child_tution_fee;	private TextCurrency deduction_epf;	private TextCurrency deduction_fixed_deposit;	private TextCurrency deduction_hlpr;	private TextCurrency deduction_infrastructure_bond;	private TextCurrency deduction_lic;	private TextCurrency deduction_mutual_fund;	private TextCurrency deduction_nsc;	private TextCurrency deduction_nsc_interest;	private TextCurrency deduction_ppf;	private TextCurrency deduction_ulip;	private TextCurrency deduction_vpf;	private PageFragmentCallbacks mCallbacks;	private String mKey;	private DeductionTwoPage mPage;	private NumberPickerBuilder npb;	public static DeductionTwoFragment create(String paramString) {		Bundle localBundle = new Bundle();		localBundle.putString(ARG_KEY, paramString);		DeductionTwoFragment localDeductionTwoFragment = new DeductionTwoFragment();		localDeductionTwoFragment.setArguments(localBundle);		return localDeductionTwoFragment;	}	public void onCreate(Bundle paramBundle) {		super.onCreate(paramBundle);		mKey = getArguments().getString(ARG_KEY);		mPage = ((DeductionTwoPage) mCallbacks.onGetPage(mKey));		npb = new NumberPickerBuilder()		.setFragmentManager(getChildFragmentManager())		.setStyleResId(R.style.BetterPickersDialogFragment_Light)		.setTargetFragment(DeductionTwoFragment.this)		.setPlusMinusVisibility(View.INVISIBLE)		.setDecimalVisibility(View.INVISIBLE)		.setLabelText(getString(R.string.rupee));				getTotal(mPage, "");	}	public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle) {		View localView = paramLayoutInflater.inflate(R.layout.fragment_page_deduction_two, paramViewGroup, false);		((TextView) localView.findViewById(android.R.id.title)).setText(mPage.getTitle());		deduction_lic = ((TextCurrency) localView.findViewById(R.id.deduction_lic));		deduction_lic.setValueText(getFormattedNumber("deduction_lic"));		deduction_lic.setInfo(getString(R.string.lic_title), getString(R.string.lic_info));				deduction_ulip = ((TextCurrency) localView.findViewById(R.id.deduction_ulip));		deduction_ulip.setValueText(getFormattedNumber("deduction_ulip"));		deduction_ulip.setInfo(getString(R.string.ulip_title), getString(R.string.ulip_info));						deduction_ppf = ((TextCurrency) localView.findViewById(R.id.deduction_ppf));		deduction_ppf.setValueText(getFormattedNumber("deduction_ppf"));		deduction_ppf.setInfo(getString(R.string.ppf_title), getString(R.string.ppf_info));				deduction_vpf = ((TextCurrency) localView.findViewById(R.id.deduction_vpf));		deduction_vpf.setValueText(getFormattedNumber("deduction_vpf"));		deduction_vpf.setInfo(getString(R.string.vpf_title), getString(R.string.vpf_info));				deduction_epf = ((TextCurrency) localView.findViewById(R.id.deduction_epf));		deduction_epf.setValueText(getFormattedNumber("deduction_epf"));		deduction_epf.setInfo(getString(R.string.epf_title), getString(R.string.epf_info));				deduction_mutual_fund = ((TextCurrency) localView.findViewById(R.id.deduction_mutual_fund));		deduction_mutual_fund.setValueText(getFormattedNumber("deduction_mutual_funds"));		deduction_mutual_fund.setInfo(getString(R.string.mutualfunds_title), getString(R.string.mutualfunds_info));				deduction_infrastructure_bond = ((TextCurrency) localView.findViewById(R.id.deduction_infrastructure_bond));		deduction_infrastructure_bond.setValueText(getFormattedNumber("deduction_infrastructure_bonds"));		deduction_infrastructure_bond.setInfo(getString(R.string.bonds_title), getString(R.string.bonds_info));				deduction_fixed_deposit = ((TextCurrency) localView.findViewById(R.id.deduction_fixed_deposit));		deduction_fixed_deposit.setValueText(getFormattedNumber("deduction_fixed_deposit"));		deduction_fixed_deposit.setInfo(getString(R.string.fixed_title), getString(R.string.fixed_info));				deduction_nsc = ((TextCurrency) localView.findViewById(R.id.deduction_nsc));		deduction_nsc.setValueText(getFormattedNumber("deduction_nsc"));		deduction_nsc.setInfo(getString(R.string.nsc_title), getString(R.string.nsc_info));				deduction_child_tution_fee = ((TextCurrency) localView.findViewById(R.id.deduction_child_tution_fee));		deduction_child_tution_fee.setValueText(getFormattedNumber("deduction_child_tution_fee"));		deduction_child_tution_fee.setInfo(getString(R.string.childtutionfee_title), getString(R.string.childtutionfee_info));				deduction_hlpr = ((TextCurrency) localView.findViewById(R.id.deduction_hlpr));		deduction_hlpr.setValueText(getFormattedNumber("deduction_hlpr"));		deduction_hlpr.setInfo(getString(R.string.hlpr_title), getString(R.string.hlpr_info));				deduction_nsc_interest = ((TextCurrency) localView.findViewById(R.id.deduction_nsc_interest));		deduction_nsc_interest.setValueText(getFormattedNumber("deduction_nsc_interest"));		deduction_nsc_interest.setInfo(getString(R.string.nscinterest_title), getString(R.string.nscinterest_info));				deduction_80ccc = ((TextCurrency) localView.findViewById(R.id.deduction_80ccc));		deduction_80ccc.setValueText(getFormattedNumber("deduction_80ccc"));		deduction_80ccc.setInfo(getString(R.string.a80ccc_title), getString(R.string.a80ccc_info));				deduction_80ccd = ((TextCurrency) localView.findViewById(R.id.deduction_80ccd));		deduction_80ccd.setValueText(getFormattedNumber("deduction_80ccd"));		deduction_80ccd.setInfo(getString(R.string.a80ccd_title), getString(R.string.a80ccd_info));				return localView;	}		public void onViewCreated(View paramView, Bundle paramBundle) {		super.onViewCreated(paramView, paramBundle);		deduction_lic.setOnClickListener(this);		deduction_ulip.setOnClickListener(this);		deduction_ppf.setOnClickListener(this);		deduction_vpf.setOnClickListener(this);		deduction_epf.setOnClickListener(this);		deduction_mutual_fund.setOnClickListener(this);		deduction_infrastructure_bond.setOnClickListener(this);		deduction_fixed_deposit.setOnClickListener(this);		deduction_nsc.setOnClickListener(this);		deduction_child_tution_fee.setOnClickListener(this);		deduction_hlpr.setOnClickListener(this);		deduction_nsc_interest.setOnClickListener(this);		deduction_80ccc.setOnClickListener(this);		deduction_80ccd.setOnClickListener(this);	}	public void onAttach(Activity paramActivity) {		super.onAttach(paramActivity);		if (!(paramActivity instanceof PageFragmentCallbacks))			throw new ClassCastException("Activity must implement PageFragmentCallbacks");		mCallbacks = ((PageFragmentCallbacks) paramActivity);	}	public void onDetach() {		super.onDetach();		mCallbacks = null;	}	public void onDialogNumberSet(int reference, long number, double decimal,			boolean isNegative, double fullNumber) {		switch (reference) {		case R.id.deduction_lic:			deduction_lic.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_lic",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_ulip:			deduction_ulip.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_ulip",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_ppf:			deduction_ppf.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_ppf",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_vpf:			deduction_vpf.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_vpf",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_epf:			deduction_epf.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_lic",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_mutual_fund:			deduction_mutual_fund.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_mutual_funds",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_infrastructure_bond:			deduction_infrastructure_bond.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_infrastructure_bonds",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_fixed_deposit:			deduction_fixed_deposit.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_fixed_deposit",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_nsc:			deduction_nsc.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_nsc",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_child_tution_fee:			deduction_child_tution_fee.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_child_tution_fee",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_hlpr:			deduction_hlpr.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_hlpr",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_nsc_interest:			deduction_nsc_interest.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_nsc_interest",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_80ccc:			deduction_80ccc.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_80ccc",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		case R.id.deduction_80ccd:			deduction_80ccd.setValueText(getFormattedString(number));			mPage.getData().putLong("deduction_80ccd",					(number != 0) ? number : 0);			mPage.notifyDataChanged();			break;		}		getTotal(mPage, "");	}		public void onClick(View view) {		String key = "";		npb.setReference(view.getId());		switch (view.getId()) {		case R.id.deduction_lic:			key = "deduction_lic";			break;		case R.id.deduction_ulip:			key = "deduction_ulip";			break;		case R.id.deduction_ppf:			key = "deduction_ppf";			break;		case R.id.deduction_vpf:			key = "deduction_vpf";			break;		case R.id.deduction_epf:			key = "deduction_epf";			break;		case R.id.deduction_mutual_fund:			key = "deduction_mutual_funds";			break;		case R.id.deduction_infrastructure_bond:			key = "deduction_infrastructure_bonds";			break;		case R.id.deduction_fixed_deposit:			key = "deduction_fixed_deposit";			break;		case R.id.deduction_nsc:			key = "deduction_nsc";			break;		case R.id.deduction_child_tution_fee:			key = "deduction_child_tution_fee";			break;		case R.id.deduction_hlpr:			key = "deduction_hlpr";			break;		case R.id.deduction_nsc_interest:			key = "deduction_nsc_interest";			break;		case R.id.deduction_80ccc:			key = "deduction_80ccc";			break;		case R.id.deduction_80ccd:			key = "deduction_80ccd";			break;		}		npb.setMaxNumber(TaxCalculationActivity.TAX_80C_DEDUCTION - getTotal(mPage, key));		npb.setNumber(getNumber(key)).show();	}	public String getFormattedNumber(String paramString) {		return Utils.getFormattedString(mPage.getData().getLong(paramString));	}	public String getNumber(String paramString) {		return String.valueOf(mPage.getData().getLong(paramString));	}	public static int getTotal(DeductionTwoPage mPage, String current) {		int total = 0;        for (String key : mPage.getData().keySet()) {        	if(key == DeductionTwoPage.DEDUCTION_TWO_TOTAL || key == current){        		continue;        	}        	total += mPage.getData().getLong(key, 0);        }		mPage.getData().putLong("deduction_two_total", total);		mPage.notifyDataChanged();		return total;	}}